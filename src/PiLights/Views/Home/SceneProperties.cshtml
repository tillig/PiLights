@using System.Reflection;
@using PiLights.Scenes;
@model Scene

<input hidden="hidden" name="sceneName" value="@Model.GetType().FullName" />
@foreach (var prop in Model.GetSceneProperties())
{
<div class="form-group">
    <label>
        <span class="label">@prop.GetDisplayName()</span>
        <span>
            @if (prop.Name.Equals("color", StringComparison.OrdinalIgnoreCase))
            {
                @Html.Editor(@prop.Name, new { htmlAttributes = new { @class = "form-control", required = "required", type = "color", style = "width:40px;padding:0;" } })
            }
            else if (prop.PropertyType == typeof(int))
            {
                <input name="@prop.Name" class="control" autocomplete="off" autofocus="autofocus" type="number" max="@prop.GetMaxValue()" required oninvalid="this.setCustomValidity('Please provide a @prop.GetDisplayName() less than @(prop.GetMaxValue()+1)')" onkeyup="this.setCustomValidity('')" onchange="this.setCustomValidity('')" />
            }
            else
            {
                <input name="@prop.Name" class="control" autocomplete="off" autofocus="autofocus" type="text" maxlength="@prop.GetMaxLength()" required oninvalid="this.setCustomValidity('Please provide a @prop.GetDisplayName()')" onkeyup="this.setCustomValidity('')" onchange="this.setCustomValidity('')" />
            }
        </span>
    </label>
</div>
}
<div class="form-actions">
    <input type="submit" name="start" id="start" data-clear-alerts="true" class="btn btn-primary" value="Apply" role="button" />
</div>
